#!/usr/bin/env perl

use strict;
use warnings;
use utf8;

use FindBin;
use lib "$FindBin::Bin/local/lib/perl5";

use Cwd qw(realpath getcwd);
use IO::File;
use Data::Dumper;
use Digest::MD5;
use Getopt::Long;
use HTTP::Tiny;
use Config::Tiny;
use YAML::Tiny qw(LoadFile DumpFile);
use File::Basename qw(basename fileparse);
use File::Spec::Functions qw(catfile);
use File::Temp qw(tempfile tmpnam tempdir);

GetOptions(
    'recipe=s'  => \my $recipes,
    'repo=s'    => \my $repos,
    'pr=s'      => \my $pull_reqs,
    'archive=s' => \my $archives,
);

my $recipe_dir    = realpath("$FindBin::Bin/../recipe");
my $repo_dir      = realpath("$FindBin::Bin/../repo");
my $repo_base_dir = realpath("$FindBin::Bin/../..");
my $archive_dir      = realpath("$FindBin::Bin/../archive");
my $git_clone_cmd = realpath("$FindBin::Bin/git-clone");

my $env   = {};
my $yamls = [];

sub handle_recipe {
    my $data = shift;

    # detect docker images
    if ( my $perl = delete $data->{perl} ) {
        $env->{DOCKER_MT_IMAGE} = "movabletype/test:perl-$perl";
    }
    if ( my $mysql = delete $data->{database} ) {
        $env->{DOCKER_MYSQL_IMAGE} = $mysql;
    }
    if ( my $php = delete $data->{php} ) {
        $env->{DOCKER_HTTPD_IMAGE} = "movabletype/test:php-$php";
    }

    # checout branch and collect links
    my @volumes;
    for my $k ( keys %$data ) {
        my $repo     = $data->{$k}{location};
        my $dest_dir = $data->{$k}{directory} || do {
            ( my $dir = $repo ) =~ s{.*/}{};
            "$repo_base_dir/$dir";
        };
        if ( $dest_dir !~ m{\A/} ) {
            $dest_dir = "$repo_base_dir/$dest_dir";
        }

        if ( $k eq 'core' ) {
            $env->{MT_HOME_PATH} = $dest_dir;
        }

        if ($repo) {
            my $branch = $data->{$k}{branch} || '';

            for my $pr ( split /\s+/, $pull_reqs ) {
                my ($pr_repo, $pr_id) = ($pr =~ m{([^/]+)/(pull/\d+)});
                next unless $pr_repo && $pr_id;
                $branch = $pr_id . '/head' if basename($dest_dir) eq $pr_repo;
            }

            {
                my %repos = map { $_ => 1 } split /\s+/, $repos;
                for my $r ( keys %repos ) {
                    my ($bn, $br) = $r =~ m{([^/]+)#(.*)$}
                        or next;

                    next unless basename($dest_dir) eq $bn;

                    $branch = $br;
                    delete $repos{$r};
                }
                $repos = join ' ', keys %repos;
            }

            my $cmd = "$git_clone_cmd $repo $dest_dir $branch";
            my $res = `$cmd 2>&1` || "";
            die "$res\nGot an error: $cmd" if $?;

            $res = `cd $dest_dir && git rev-parse HEAD 2>&1`;
            die "$res\nGot an error: git rev-parse HEAD" if $?;
            print STDERR "$k:$res";
        }

        next if $k eq 'core';

        my $plugin_dir = $dest_dir;
        if ( $data->{$k}{prefix} ) {
            $plugin_dir = catfile( $plugin_dir, $data->{$k}{prefix} );
        }

        my $links = $data->{$k}{links};
        if ( !$links ) {
            $links = [
                map { $_ =~ s{\A$plugin_dir/}{}; $_ } (
                    glob("$plugin_dir/*.cgi"),
                    glob("$plugin_dir/plugins/*"),
                    glob("$plugin_dir/mt-static/plugins/*"),
                    glob("$plugin_dir/themes/*"),
                    glob("$plugin_dir/addons/*"),
                    glob("$plugin_dir/mt-static/addons/*"),
                    glob("$plugin_dir/tools/*"),
                )
            ];
        }

        for my $l (@$links) {
            push @volumes, "      - '$plugin_dir/$l:/var/www/cgi-bin/mt/$l:\${DOCKER_VOLUME_MOUNT_FLAG}'";
        }
    }

    my ( $fh, $file ) = tmpnam();
    print $fh <<YAML;
version: "3"
services:
  mt:
    volumes:
@{[join "\n", @volumes]}
  httpd:
    volumes:
@{[join "\n", @volumes]}
YAML
    close $fh;

    push @$yamls, $file;
}

for my $recipe ( split /\s+/, $recipes ) {
    my $recipe_file = ( $recipe =~ m{^[/\.]} && -e $recipe )
        ? realpath($recipe)
        : do {
            $recipe =~ s{\.yaml\z}{};
            $recipe .= '.yaml';
            "$recipe_dir/$recipe";
        };

    # get recipe
    if ( !-e $recipe_file ) {
        $recipe_file = "";

        my $recipe_url = $recipe =~ m{\Ahttps?://} ? $recipe : do {
            my $conf_file = catfile( $ENV{'HOME'}, '.mt-dev.conf' );

            my $conf = Config::Tiny->read( $conf_file, 'utf8' );
            if ( !$conf ) {
                $conf = Config::Tiny->new;

                print STDERR "Please input base URL of recipe data: ";
                my $base = <STDIN>;
                chomp $base;

                $conf->{recipe}{base_url} = $base;
                $conf->write( $conf_file, 'utf8' );
            }

            if ( $conf->{recipe}{base_url} ) {
                my $base_url = $conf->{recipe}{base_url};
                $base_url =~ s/\/+$//;
                "$base_url/$recipe";
            }
            else {
                "";
            }
        };

        if ($recipe_url) {
            my $response = HTTP::Tiny->new->get($recipe_url);
            die "Failed: @{[Dumper($response)]}"
                unless $response->{success} && length $response->{content};

            my ( $fh, $filename ) = tempfile();
            print $fh $response->{content};

            $recipe_file = $filename;
        }

        if ( !$recipe_file ) {
            die qq{Can not find recipe for "$recipe".};
        }
    }

    handle_recipe( LoadFile($recipe_file) );
}

for my $r ( split /\s+/, $repos ) {
    my $directory
        = ( $r =~ m{^[/\.]} && -d $r )
        ? realpath($r)
        : "$repo_dir/$r";

    next unless $directory;

    # get repo
    if ( !-d $directory ) {
        my $branch = '';
        $branch = $1 if $r =~ s/(?:#(\w+))\z//;

        my $k = basename($r);
        $directory = catfile( $repo_base_dir, $k );

        my $cmd = "$git_clone_cmd $r $directory $branch";
        my $res = `$cmd 2>&1` || "";
        die "$res\nGot an error: $cmd" if $?;

        $res = `cd $directory && git rev-parse HEAD 2>&1`;
        die "$res\nGot an error: git rev-parse HEAD" if $?;
        print STDERR "$k:$res";
    }

    handle_recipe( { $r => { directory => $directory, }, } );
}

for my $a ( split /\s+/, $archives ) {
    my $file_path;
    my ( $basename, $ext ) = ( fileparse( $a, qr/\.[a-zA-Z\.]+$/ ) )[ 0, 2 ];

    if ( $a =~ m{^https?://} ) {

        # download
        my $response = HTTP::Tiny->new->get($a);
        die "Failed: @{[Dumper($response)]}"
            unless $response->{success} && length $response->{content};

        ( my $fh, $file_path ) = tempfile( undef, SUFFIX => $ext );
        print $fh $response->{content};
    }
    elsif ( $a =~ m{^/} ) {
        $file_path = $a;
    }
    else {
        $file_path = catfile( $archive_dir, $a );
    }

    die "File not found: $a" unless -f $file_path;

    # extract archive
    my $cwd       = getcwd();
    my $directory = tempdir( '/tmp/mt-dev-archive-temp-XXXXX', );

    chdir $directory;
    my $extract_res
        = $file_path =~ m/\.zip$/i
        ? `unzip -q $file_path`
        : `tar zxf $file_path`;
    if ($?) {
        die "Failed to extract: $a";
    }

    my $md5_ctx = Digest::MD5->new;
    $md5_ctx->addfile( IO::File->new( $file_path, 'r' ) );
    print STDERR join( ':', $basename . $ext, $md5_ctx->hexdigest ) . "\n";

    my @entries = grep {
        !m{^(addons|mt-static|php|alt-tmpl|plugins|default_templates|search_templates|extlib|themes|import|tmpl|tools|lib|.*\.cgi)$}
    } glob('*');
    if ( @entries == 1 ) {
        $directory = catfile( $directory, $entries[0] );
    }
    chdir $cwd;

    $basename =~ s{\.}{_}g;    # "." causes problems in yaml files
    handle_recipe( { $basename => { directory => $directory, }, } );
}

if (@$yamls) {
    $env->{DOCKER_COMPOSE_YML_OVERRIDE} = join( ' ', map {"-f $_"} @$yamls );
}

# output args for make command
print join ' ', map {qq{$_="@{[$env->{$_}]}"}}
    keys(%$env);
